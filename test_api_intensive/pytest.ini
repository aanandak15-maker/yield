[pytest]
# Pytest configuration for API intensive testing

# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test paths
testpaths = suites

# Output options
addopts = 
    # Verbose output
    -v
    # Show local variables in tracebacks
    -l
    # Show summary of all test outcomes
    -ra
    # Strict markers (fail on unknown markers)
    --strict-markers
    # Warnings
    -W ignore::DeprecationWarning
    # HTML report generation
    --html=reports/test_report.html
    --self-contained-html
    # Timeout for tests (30 seconds default)
    --timeout=30
    # Parallel execution (use -n auto for automatic worker count)
    # Uncomment to enable: -n auto
    # Coverage options (if pytest-cov is installed)
    # --cov=test_api_intensive
    # --cov-report=html:reports/coverage
    # --cov-report=term-missing

# Markers for test categorization
markers =
    functional: Functional tests for API endpoints
    variety_selection: Tests for automatic variety selection
    validation: Input validation tests
    performance: Performance and response time tests
    load: Load and stress tests
    error_handling: Error handling and recovery tests
    security: Security and input sanitization tests
    integration: Integration tests with external services
    backward_compat: Backward compatibility tests
    end_to_end: End-to-end scenario tests
    monitoring: Monitoring and logging tests
    slow: Tests that take longer than 5 seconds
    fast: Tests that complete quickly (< 1 second)
    critical: Critical tests that must pass

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = reports/test_execution.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] [%(filename)s:%(lineno)d] %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Timeout settings
timeout_method = thread

# Minimum Python version
minversion = 3.8
